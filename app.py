import streamlit as st
import shutil
from pathlib import Path
from Extract.PE import *


st.set_page_config(
   page_title="Malware Detection",
   page_icon=":sleuth_or_spy:",
   layout="wide",
   initial_sidebar_state="auto",
)
# X√≥a t·∫•t c·∫£ c√°c t·ªáp trong th∆∞ m·ª•c t·∫°m n·∫øu th∆∞ m·ª•c t·ªìn t·∫°i
def clean_temp_files(temp_dir):
    try:
        shutil.rmtree(temp_dir)  # X√≥a to√†n b·ªô th∆∞ m·ª•c v√† c√°c t·ªáp b√™n trong
        st.success(f"Successfully removed {temp_dir}")
    except Exception as e:
        st.error(f"Error removing {temp_dir}: {e}")

count= [0,0,0]
    
align_left,center,align_right = st.columns([0.4,0.45,0.15])
with center:
    st.title(":blue[ANTIVIRUS]:sleuth_or_spy:")
# th·ªÉ hi·ªán t·ªïng quan
def show():
    
    left = st.container(height=173,border=True)   
    left.header(count[0])
    left.info("Total Files")

    middle = st.container(height=173,border=True)
    middle.header(count[2])
    middle.success("Safe")

    right = st.container(height=173,border=True)
    right.header(count[1])
    right.error("Malware")
# show()

def check_PE():
    with st.container(border=True):
        st.markdown("## KI·ªÇM TRA FILE")
        # Cho ph√©p ng∆∞·ªùi d√πng t·∫£i nhi·ªÅu file l√™n
        upload_files = st.file_uploader("Ch·ªçn file", accept_multiple_files=True, type=None)
        if not upload_files:
            st.info("Vui l√≤ng nh·∫≠p file ƒë·ªÉ ki·ªÉm tra.")
            if st.button("Remove"):
                clean_temp_files(f".temp")
        temp_path  = Path(".temp")
        temp_path .mkdir(parents=True, exist_ok= True)
        with st.spinner("Checking files..."):
            for i in upload_files:
                count[0]+=1
                # T·∫°o temp file
                temp_file_path = temp_path / f"temp_{i.file_id}"
                # T·∫°o temp path
                with open(temp_file_path, 'wb') as temp_file:
                    temp_file.write(i.getvalue())
                # G√°n PE file
                pe = pefile.PE(temp_file_path)
                pe_md5 = get_md5(temp_file_path)
                if is_md5_in_file(pe_md5, "MD5\md5.txt"):
                    st.error(f"File {i.name} l√† Virus. ", icon='üö®')
                    count[1]+=1 
                else:
                    # L·∫•y k·∫øt qu·∫£ c·ªßa model
                    with open('Classifier\PE\pickel_malware_detector.pkl','rb') as file:
                        clf = pickle.load(file)
                    file.close()
                    with open('Classifier\PE\\features.pkl','rb') as file2:
                        features = pickle.load(file2)
                    file2.close()
                
                    # L·∫•y d·ªØ li·ªáu c·ªßa PE file
                    data = extract_infos(pe)
                    # L·ªçc c√°c pe features (ch·ªâ l·∫•y nh·ªØng features c√≥ trong features.pkl)
                    pe_features = list(map(lambda x: data[x], features))
                    # Ki·ªÉm tra xem c√≥ ph·∫£i virus hay ko
                    res= clf.predict([pe_features])[0]
                    if(res==0):
                        st.error(f"File {i.name} l√† Virus. ", icon='üö®')
                        count[1]+=1   
                    else:
                        st.success(f"File {i.name} l√† S·∫°ch.", icon="‚úÖ")
                        count[2]+=1      
        
# 
def main():
    col1 , col2,col3,col4 = st.columns([0.225,0.15,0.4,0.225])
    with col3:
        check_PE()
    with col2:
        show()

main()